@{
    ViewBag.Title = "URL Evaluator";
}
<div class="row">
    <div class="input-group col-md-4 col-md-offset-4">
        <h2 id="score"></h2>
    </div>
</div>
<br />
<div class="row" id="errors">

</div>
<div class="row">
    <div class="form-inline">
        <div class="input-group col-md-10 col-md-offset-2">
            <input type="text" name="url" id="url" class="form-control" placeholder="Type full URL with http://... to measure time" />
            <button type="submit" name="submit" id="go" class="btn btn-primary">GO</button>
        </div>
    </div>
</div>
<br />
<div class="row" id="results">
    <table class="table table-condensed" id="results-table">
        <thead>
            <tr>
                <th width="70%">Link</th>
                <th width="15%">Time Minimum[sec]</th>
                <th width="15%">Time Maximum[sec]</th>
            </tr>
        </thead>
        <tbody>
            
        </tbody>
    </table>
</div>
<br />
<div class="row" id="history">
    <a href="#" id="show-history">[Show history]</a>
    <table class="table table-condensed" id="history-table">
        <thead>
            <tr>
                <th width="60%">Link</th>
                <th width="20%">Time</th>
                <th width="20%">Date</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>
</div>

@section scripts {
    <script src="~/Scripts/jquery.signalR-2.2.1.min.js"></script>
    <script src="~/signalr/hubs"></script>

    <script>
        $(function () {
            var proccessing = false;
            var measureSiteApi = $.connection.measureSitePerformanceHub;
            var loadedData = {};

            function calculateAverageResponseTime(data) {
                var sum = 0;
                var n = 0;
                for (var key in data) {
                    for (var i = 0; i < data[key].length; i++) {
                        sum += data[key][i];
                    }
                    n += data[key].length;
                }
                if (n == 0) {
                    return null;
                }
                return sum / n;
            }

            function getGroupedDataWithMinAndMax(data) {
                var groupedData = [];

                for (var key in data) {
                    var min = Math.min.apply(Math, data[key]);
                    var max = Math.max.apply(Math, data[key]);
                    groupedData.push({url: key, min: min, max: max});
                }
                return groupedData;
            }

            function showResponseTimeResult(data) {
                var avg = calculateAverageResponseTime(data);
                if (avg === null) {
                    return;
                }
                $("#score").html('<small>Average load time</small> ' + avg.toFixed(4) + ' <small>sec</small>');
            }

            function renderResultTable(data) {
                var groupedData = getGroupedDataWithMinAndMax(data);
                var sortedData = groupedData.sort(function (x, y) { return y.max - x.max });
                var html = "";
                for (var i = 0; i < sortedData.length; i++) {
                    html += '<tr><td>' + groupedData[i].url + '</td><td>' + groupedData[i].min + '</td><td>' + groupedData[i].max + '</td></tr>';
                }
                $('#results-table tbody').html(html);
            }

            measureSiteApi.client.end = function () {
                proccessing = false;
                $("#url").prop('disabled', false);
                $("#go").prop('disabled', false);
            };
            measureSiteApi.client.urlFailResponse = function (url) {
                //$('#results-table tbody').append('<tr><td><span class="glyphicon glyphicon-remove" aria-hidden="true" style="color:red"></span></td><td>' + url + '</td><td></td></tr>');
            };
            measureSiteApi.client.urlSuccessResponse = function (url, time) {
                //$('#results-table tbody').append('<tr><td><span class="glyphicon glyphicon-ok" aria-hidden="true" style="color:green"></span></td><td>' + url + '</td><td>' + time + '</td></tr>');
                if (loadedData[url] === undefined) {
                    loadedData[url] = [];
                }
                loadedData[url].push(parseFloat(time));
                showResponseTimeResult(loadedData);
                renderResultTable(loadedData);
            };
            measureSiteApi.client.error = function (message) {
                console.log(message);
                $('#errors').append("<div class=\"alert alert-danger\"><a href=\"#\" class=\"close\" data-dismiss=\"alert\" aria-label=\"close\" title=\"close\">×</a><strong>Error occured!</strong> " + message + "</div>");
            };
            measureSiteApi.client.getResultHistory = function (url, time, guid, date) {
                if (time != null) {
                    $('#history-table tbody').append('<tr><td>' + url + '</td><td>' + time + '</td><td>' + date + '</td></tr>');
                }
            };
            $.connection.hub.start().done(function () {
                $('#go').click(function () {
                    if (proccessing == false) {
                        $('#results-table tbody tr').remove();
                        loadedData = {};
                        measureSiteApi.server.evaluateResponseTime($('#url').val());
                        proccessing = true;
                        $("#url").prop('disabled', true);
                        $("#go").prop('disabled', true);
                    }
                });
                $("#show-history").click(function () {
                    var url = $("#url").val();
                    measureSiteApi.server.loadHistory(url,null);
                });
            });
        });
    </script>
}
